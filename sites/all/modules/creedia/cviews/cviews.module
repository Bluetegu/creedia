<?php
// $Id$
/*
 * @file
 * Builds Creedia's views programatically
 *
 * Build blocks for related creeds, opinions and members
 *
 */

if (!defined(CREEDIA_NODES_PER_BLOCK)) {
  define("CREEDIA_NODES_PER_BLOCK", 3);
  define("CREEDIA_NODES_PER_PAGE", 10);
  define("CREEDIA_INTERPRETATION_PER_PAGE", 5);
}

if (!defined(CREEDIA_MAX_SYMBOLS_IN_BLOCK)) {
  define("CREEDIA_MAX_SYMBOLS_IN_BLOCK", 4);
  define("CREEDIA_MAX_SYMBOLS_IN_TEASER", 6);
  define("CREEDIA_MAX_SYMBOLS_IN_PROFILE", 8);
}


/*
 * Implementation of hook_block
 *
 */
function cviews_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
  case 'list':
    // If $op is "list", we just need to return a list of block descriptions.
    // This is used to provide a list of possible blocks to the administrator,
    // end users will not see these descriptions.
    $blocks[0]['info'] = t('Creedia: Related Creeds');
    $blocks[1]['info'] = t('Creedia: Related Discussions');
    $blocks[2]['info'] = t('Creedia: Related Members');
    $blocks[3]['info'] = t('Creedia: Latest Creeds');
    $blocks[4]['info'] = t('Creedia: Latest Discussions');
    $blocks[5]['info'] = t('Creedia: Latest Members');
    $blocks[6]['info'] = t('Creedia: Front Featured Creeds');
    $blocks[7]['info'] = t('Creedia: Front Featured Discussions');
    $blocks[8]['info'] = t('Creedia: Front Featured Members');
    $blocks[9]['info'] = t('Creedia: Front Latest Creeds');
    $blocks[10]['info'] = t('Creedia: Front Latest Discussions');
    $blocks[11]['info'] = t('Creedia: Front Latest Members');
    $blocks[12]['info'] = t('Creedia: Related Blogs');
    $blocks[13]['info'] = t('Creedia: Latest Blogs');
    $blocks[14]['info'] = t('Creedia: Front Latest Blogs');
    $blocks[3]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[4]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[5]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[6]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[7]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[8]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[9]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[10]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[11]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[13]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[14]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[0]['visibility'] = 1; // show only on listed pages
    $blocks[1]['visibility'] = 1; // show only on listed pages
    $blocks[2]['visibility'] = 1; // show only on listed pages
    $blocks[3]['visibility'] = 0; // show on all pages except the listed ones
    $blocks[4]['visibility'] = 0; // show on all pages except the listed ones
    $blocks[5]['visibility'] = 0; // show on all pages except the listed ones
    $blocks[6]['visibility'] = 1; // show only on listed pages
    $blocks[7]['visibility'] = 1; // show only on listed pages
    $blocks[8]['visibility'] = 1; // show only on listed pages
    $blocks[9]['visibility'] = 1; // show only on listed pages
    $blocks[10]['visibility'] = 1; // show only on listed pages
    $blocks[11]['visibility'] = 1; // show only on listed pages
    $blocks[12]['visibility'] = 1; // show only on listed pages
    $blocks[13]['visibility'] = 0; // show on all pages except the listed ones
    $blocks[14]['visibility'] = 1; // show only on listed pages
    $blocks[0]['pages'] = "opinions\n"."opinions/*\n"."members\n"."members/*\n"."blogs\n"."blogs/*\n"."node/*\n";
    $blocks[1]['pages'] = "creeds\n"."creeds/*\n"."members\n"."members/*\n"."blogs\n"."blogs/*\n"."node/*\n";
    $blocks[2]['pages'] = "opinions\n"."opinions/*\n"."creeds\n"."creeds/*\n"."blogs\n"."blogs/*\n";
    $blocks[3]['pages'] = "<front>\n"."creeds\n"."creeds/*\n";
    $blocks[4]['pages'] = "<front>\n"."opinions\n"."opinions/*\n";
    $blocks[5]['pages'] = "<front>\n"."members\n"."members/*\n";
    $blocks[6]['pages'] = "<front>\n";
    $blocks[7]['pages'] = "<front>\n";
    $blocks[8]['pages'] = "<front>\n";
    $blocks[9]['pages'] = "<front>\n";
    $blocks[10]['pages'] = "<front>\n";
    $blocks[11]['pages'] = "<front>\n";
    $blocks[10]['pages'] = "<front>\n";
    $blocks[11]['pages'] = "<front>\n";
    $blocks[12]['pages'] = "opinions\n"."opinions/*\n"."members\n"."members/*\n"."creeds\n"."creeds/*\n"."node/*\n";
    $blocks[13]['pages'] = "<front>\n"."blogs\n"."blogs/*\n";
    $blocks[14]['pages'] = "<front>\n";

    return $blocks;
  case 'configure':
    // If $op is "configure", we need to provide the administrator with a
    // configuration form. The $delta parameter tells us which block is being
    // configured. In this example, we'll allow the administrator to customize
    // the text of the first block.
    $form = array();
    //       if ($delta == 0) {
    //         // All we need to provide is a text field, Drupal will take care of
    //         // the other block configuration options and the save button.
    //         $form['block_example_string'] = array(
    //           '#type' => 'textfield',
    //           '#title' => t('Block contents'),
    //           '#size' => 60,
    //           '#description' => t('This string will appear in the example block.'),
    //           '#default_value' =>
    //             variable_get('block_example_string',  t('Some example content.')),
    //         );
    //      }
    return $form;
  case 'save':
    // If $op is "save", we need to save settings from the configuration form.
    // Since the first block is the only one that allows configuration, we
    // need to check $delta to make sure we only save it.
    //       if ($delta == 0) {
    //         // Have Drupal save the string to the database.
    //         variable_set('block_example_string', $edit['block_example_string']);
    //       }
    return;
  case 'view': default:
    // If $op is "view", then we need to generate the block for display
    // purposes. The $delta parameter tells us which block is being requested.

    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
    }

    $view_block = TRUE;
    $sort = CREEDIA_DEFAULTSORT_ID;
    $add_d = FALSE;

    switch ($delta) {
      case 0:
        $type = 'creed';
        $title = 'Related Creeds';
        $view_name = 'Creed_blocks';
        $display_id = 'block_2';
        $nid = 0;
        $add_d = TRUE;
        $sort = 'popular';

        if ($node) {
          if ($node->type != 'opinion' && $node->type != 'dblog') {
            // related creed block shown in opinion view
            $view_block = FALSE;
          }
        }
        break;
      case 1:
        $type = 'opinion';
        $title = 'Related Discussions';
        $view_name = 'Discussion_blocks';
        $display_id = 'block_2';
        $sort ='featured';
        $nid = 0;
        $add_d = TRUE;

        if ($node) {
          switch ($node->type) {
            case 'opinion':
            case 'interpretation':
              $nid = $node->nid; // avoid self
              break;
            case 'creed':
              break;  // show block
            case 'member':
            default:
              $view_block = FALSE;
              break;
          }
        }
        break;
      case 2:
        $type = 'member';
        $title = 'Related Members';
        $view_name = 'Member_blocks';
        $display_id = 'block_2';
        $sort = 'featured';
        $nid = 0;
        $add_d = TRUE;

        if ($node) {
          $view_block = FALSE;
        }
        break;
      case 3:
        $type = 'creed';
        $title = 'Latest Creeds';
        $view_name = 'Creed_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'recent';
        $ignore_terms = TRUE;
        $add_d = TRUE;
        break;
      case 4:
        $type = 'opinion';
        $title = 'Latest Discussions';
        $view_name = 'Discussion_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'recent';
        $ignore_terms = TRUE;
        $add_d = TRUE;
        break;
      case 5:
        $type = 'member';
        $title = 'Latest Members';
        $nid = 0;
        $view_name = 'Member_blocks';
        $display_id = 'block_1';
        $sort = 'joined';
        $ignore_terms = TRUE;
        $add_d = TRUE;
        break;
//      case 6:
//        $type = 'creed';
//        $title = 'Featured Creeds';
//        $description = 'Featured Creeds';
//        $name = 'featured_creeds_prog';
//        $nid = 0;
//        $ignore_terms = TRUE;
//        $featured = TRUE;
//        break;
//      case 7:
//        $type = 'opinion';
//        $title = 'Featured Discussions';
//        $description = 'Featured Discussions';
//        $name = 'featured_opinions_prog';
//        $nid = 0;
//        $ignore_terms = TRUE;
//        $featured = TRUE;
//        break;
//      case 8:
//        $type = 'member';
//        $title = 'Featured Members';
//        $description = 'Featured Members';
//        $name = 'featured_members_prog';
//        $nid = 0;
//        $ignore_terms = TRUE;
//        $featured = TRUE;
//        break;
      case 9:
        $type = 'creed';
        $title = 'Latest Creeds';
        $view_name = 'Creed_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'recent';
        $ignore_terms = TRUE;
        break;
      case 10:
        $type = 'opinion';
        $title = 'Latest Discussions';
        $view_name = 'Discussion_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'recent';
        $ignore_terms = TRUE;
        break;
      case 11:
        $type = 'member';
        $title = 'Latest Members';
        $view_name = 'Member_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'joined';
        $ignore_terms = TRUE;
        break;
      case 12:
        $type = 'blog';
        $title = 'Related Blogs';
        $view_name = 'Blog_blocks';
        $display_id = 'block_2';
        $sort = 'featured';
        $nid = 0;
        $add_d = TRUE;

        if ($node) {
          $view_block = FALSE;
        }
        break;
      case 13:
        $type = 'blog';
        $title = 'Latest Blogs';
        $view_name = 'Blog_blocks';
        $display_id = 'block_1';
        $sort = 'recent';
        $nid = 0;
        $ignore_terms = TRUE;
        $add_d = TRUE;
        break;
      case 14:
        $type = 'blog';
        $title = 'Latest Blogs';
        $view_name = 'Blog_blocks';
        $display_id = 'block_1';
        $nid = 0;
        $sort = 'recent';
        $ignore_terms = TRUE;
        break;
      }
      $description = $title;
//
    if ($view_block) {
      if (!$ignore_terms) {
//        if ($node) {
//          $terms = cviews_node_to_terms_filtered($node->nid, $type);
//          $description .= ' based on node\'s terms.';
//        }
//        else {
//          $terms = cviews_url_to_terms_filtered($type);
//          $description .= ' based on selected terms.';
//        }
        cviews_set_exposed_filters($view_name, $display_id);
      }
      $block['content'] = views_embed_view($view_name, $display_id);
//                   cviews_generate_block(array('type' => $type,
//						      'name' => $name,
//						      'title' => $title,
//						      'description' => $description,
//						      'nid' => $nid,
//						      'terms' => $terms,
//						      'sort' => $sort,
//      ));
      $path = $type .'s';
      if ($sort != CREEDIA_DEFAULTSORT_ID) {
        $path .= '/'. $sort;
      }
//      if ($terms) {
//        foreach ($terms as $vid => $term_ids) {
//          $path .= '/'. implode('+', $term_ids) ;
//        }
//      }
//
      $block['subject'] = $add_d ? l('» '. $title, $path, array('attributes' => array('title' => $description))) :
      l($title, $path, array('attributes' => array('title' => $description)));
      // featured indications is added as variable in tendu_block
    }
  }
  return $block;
}

/**
 * Manipulate exposed filter remembered
 */
function cviews_set_exposed_filters($view_name, $display_id) {
  global $_SESSION;

  switch (arg(0)) {
    case 'creeds':
    case 'blogs':
    case 'members':
      $page_view_name = ucfirst(arg(0));
      break;
    case 'opinions':
      $page_view_name = 'Dicussions';
      break;
  }
  if ($page_view_name) {
    // copy the page remembered options to the block exposed filter
    $_SESSION['views'][$view_name][$display_id] = $_SESSION['views'][$page_view_name]['default'];
  }
  elseif ($node = menu_get_object()) {
    // add node terms as filters
  }
}


/**
 * Creedia Blog view
 */
//function cviews_blog($uid = 1) {
//
//  $view = views_create_view('blog', t('The World\'s Creed As People See It.'));
//  views_view_add_page($view, t('Creedia Blog'), 'blog', 'teaser', TRUE, CREEDIA_NODES_PER_PAGE, '', 1, TRUE);
//
//  views_view_add_filter($view, 'node', 'status', '=', 1, '') ;
//  views_view_add_filter($view, 'node', 'distinct', '=', array(0 => 'distinct'), '') ;
//  if ($uid == 1) {
//    views_view_add_filter($view, 'node', 'type', 'OR', array('blog', 'simplenews'), '') ;
//  }
//  else {
//    views_view_add_filter($view, 'node', 'type', 'OR', array('dblog'), '') ;
//  }
//  views_view_add_filter($view, 'users', 'uid', '=', $uid, '') ;
//
//  views_view_add_sort($view, 'node', 'sticky', 'ASC', '');
//  views_view_add_sort($view, 'node', 'created', 'DESC', '');
//
//  $view->argument = array(
//			  array(
//				'type' => 'node_feed',
//				'argdefault' => 2,
//				'title' => '',
//				'options' => '',
//				'wildcard' => '',
//				'wildcard_substitution' => '',
//				),
//			  );
//
//  views_load_cache();
//  views_sanitize_view($view);
//  $output = views_build_view('embed', $view, array(arg(1)), $view->use_pager, $view->nodes_per_page);
//
//  if (!$output) {
//    $output = t('No blog posts here yet.');
//  }
//
//  return $output;
//}
//
///*
// *  Builds embeded interpretation view rendered within a creed node page.
// */
//function cviews_interpretation_view($nid, $sort = 'adopted') {
//
//  $view = views_create_view('interpretations', '');
//  //views_view_add_page($view, $title, $url, $type, $pager, $nodes_per_page,
//  //                    $header, $header_format, $breadcrumb_no_home = FALSE)
//  // Use $use_pager to provide a non zero pager id. See http://drupal.org/node/67369. The zero index pager
//  // is used by the comment module
//  views_view_add_page($view, '', NULL, 'teaser', 2, CREEDIA_INTERPRETATION_PER_PAGE, '', 1, TRUE);
//  //views_view_add_filter($view, $table, $field, $operator, $value, $option)
//  views_view_add_filter($view, 'node', 'status', '=', 1, '') ;
//  views_view_add_filter($view, 'node', 'distinct', '=', array(0 => 'distinct'), '') ;
//  views_view_add_filter($view, 'node', 'type', 'OR', array(0 => 'interpretation'), '') ;
//  views_view_add_filter($view, 'node_data_field_creed_reference1', 'field_creed_reference1_nid_default', 'OR', array(0 => $nid), '') ;
//
//  switch ($sort) {
//  case 'recent':
//    break;
//  case 'adopted':
//  default:
//    //    views_view_add_sort($view, 'flag_counts_adopted_interpretation', 'count', 'DESC', '');
//    views_view_add_sort($view, 'flag_counts_adopt', 'count', 'DESC', '');
//    break;
//  }
//  //  views_view_add_sort($view, 'node', 'changed', 'DESC', '');
//  views_view_add_sort($view, 'node', 'created', 'DESC', '');
//
//  views_load_cache();
//  views_sanitize_view($view);
//  //views_build_view($type, $view, $args = array(), $use_pager = false, $limit = 0, $page = 0, $offset= 0, $filters= NULL)
//  $output =  views_build_view('page', $view, array(), $view->use_pager, $view->nodes_per_page);
//
//  return $output;
//}


/*
 * Utility function that converts URL to
 * an array of terms. Terms from vocabularies not
 * assocaited with the node type are filtered.
 *
 * Note that this function parses only
 * URLS of the form: list/sort/terms
 *
 * @param type
 *  type of node listed (creed, opinion, member)
 *
 * @return
 *  term_ids in the URL
 */
function cviews_url_to_terms_filtered($type = false, $arg_list = array()) {
  static $mterm_ids; // Term ids array indexed by vocabulary (not filtered)

  if (!$mterm_ids) {
    $term_ids = array(); // List of parsed term ids

    // Get all terms into an array indexed by vid
    foreach($arg_list as $args) {
      $selected = taxonomy_terms_parse_string($args);
      if ($selected) {
	foreach ($selected['tids'] as $term_id) {
	  $term = taxonomy_get_term($term_id);
	  $parents =  taxonomy_get_parents($term->tid, $key = 'vid');
	  $parent = $parents[$term->vid];
	  if ($parent && $type != 'member') {
	    $term_ids[] = $parent->tid;	// use the parent term instead
	  }
	  else {
	    $term_ids[] = $term->tid;
	  }
	}
      }
      $mterm_ids[$term->vid] = $term_ids;
      $term_ids = '';
      $i++;
    }
  }

  // return the filtered term ids per vid
  $fterm_ids = $type ? _cview_filter_terms($mterm_ids, $type) : $mterm_ids;
  return $fterm_ids;
}

/*
 * @param terms:
 *  array indexed by vid, each is by itself array of term-ids
 * @param type:
 *  type of target list
 */
function _cview_filter_terms($terms, $type) {

  $fterms = array();
  if ($terms) {
    foreach ($terms as $vid => $term_ids) {
      switch($vid) {
      case CREEDIA_RELIGION_VID:
	$fterms[$vid] = $term_ids;   // all are tagged by Religion
	break;
      case CREEDIA_BELIEFSET_VID:
	if ($type != 'member') {
	  $fterms[$vid] = $term_ids;  // Only members are not tagged by belief set
	}
	break;
      case CREEDIA_FREETAG_VID:
	if ($type == 'opinion' || $type == 'interpretation' || $type == 'blog' || $type == 'dblog' || $type == 'image_cck') {
	  $fterms[$vid] = $term_ids;  // Only interpretation are free tagged
	}
	break;
      case CREEDIA_COUNTRY_VID:
	if ($type == 'member') {
	  $fterms[$vid] = $term_ids;  // Only members are tagged by belief set
	}
	break;
      case CREEDIA_GENDER_VID:
	if ($type == 'member') {
	  $fterms[$vid] = $term_ids;  // Only members are tagged by belief set
	}
	break;
      }
    }
  }
  return $fterms;
}


/*
 * filter the node terms per the target type
 *
 */
function cviews_node_to_terms_filtered($nid, $type) {

  $mterm_ids = array();
  $nterms = taxonomy_node_get_terms($node);
  foreach ($nterms as $term) {
    $mterm_ids[$term->vid][] = $term->tid;
  }
  // return the filtered term ids per vid
  return _cview_filter_terms($mterm_ids, $type);
}

// /*
//  * Utility function that returns TRUE if the URL
//  * taxonomy arguments includes a single religion
//  * term only, FALSE otherwise
//  */
// function cview_one_religion() {

//   if (arg(2)) {
//     // we rely here on the fact that religion taxonomy terms
//     // will always be generated in arg(2)
//     $terms = taxonomy_terms_parse_string(arg(2));
//     if (count($terms['tids']) == 1) {
//       $term = taxonomy_get_term($terms['tids'][0]);
//       if ($term->vid == CREEDIA_RELIGION_VID){
// 	return TRUE;
//       }
//     }
//   }
//   return FALSE;
// }

// /**
//  * Send message to user to select a single religion
//  * and redirect query
//  */
// function cviews_redirect() {
//   drupal_set_message(t('Select a single Religion term to view creeds sorted by rate.'));
//   $path = 'creeds/recent/';
//   $i = 2;
//   while (arg($i)) {
//     $path .= arg($i) .'/';
//     $i++;
//   }
//   drupal_goto($path, NULL, NULL, 307);  // temporary redirect
// }

/*
 *  Builds block views for related creeds, opinions and members.
 *  Function called hook_block
 *
 */
//function cviews_generate_block($cargs = array()) {
//
//  $type = $cargs['type'];
//  $terms = $cargs['terms'];
//  $nid = $cargs['nid'];
//  $sort = $cargs['sort'];
//
//  // create a basic view object
//  //views_create_view($name, $description, $access = array()) {
//  $view = views_create_view($cargs['name'], t($cargs['description']));
//
//  // create a block 'view'
//  //views_view_add_block($view, $title, $type, $nodes_per_block, $more, $use_page_header, $header = '', $header_format= 0)
//  views_view_add_block($view, t($cargs['title']), 'list', CREEDIA_NODES_PER_BLOCK, FALSE, FALSE, '', 1);
//
//  switch ($type) {
//  case 'blog':
//  $view->field = array (
//			array (
//			       'tablename' => 'node',
//			       'field' => 'title',
//			       'label' => '',
//			       'handler' => 'views_handler_field_nodelink',
//			       'options' => 'nolink',
//			       ),
//			array (
//			       'tablename' => 'node',
//			       'field' => 'body',
//			       'label' => '',
//			       'handler' => 'views_handler_field_teaser_plain',
//			       'options' => 48, // number of charcters to truncate teaser
//			       ),
//			array (
//			       'tablename' => 'users',
//			       'field' => 'uid',
//			       'label' => '',
//			       ),
//			);
//  break;
//  case 'creed':
//  $view->field = array (
//			array (
//			       'tablename' => 'node',
//			       'field' => 'title',
//			       'label' => '',
//			       'handler' => 'views_handler_field_nodelink',
//			       'options' => 'nolink',
//			       ),
//			);
//
//  break;
//  case 'opinion':
//    $view->field = array (
//			  array (
//				 'tablename' => 'node',
//				 'field' => 'title',
//				 'label' => '',
//				 'handler' => 'views_handler_field_nodelink',
//				 'options' => 'nolink',
//				 ),
//			  array (
//				 'tablename' => 'node',
//				 'field' => 'body',
//				 'label' => '',
//				 'handler' => 'views_handler_field_teaser_plain',
//				 'options' => 48, // number of charcters to truncate teaser
//				 ),
//			  array (
//				 'tablename' => 'node_data_field_opinion_image',
//				 'field' => 'field_opinion_image_fid',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'block_default',
//				 ),
//			  array (
//				 'tablename' => 'node_data_field_opinion_em_picture',
//				 'field' => 'field_opinion_em_picture_embed',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'image_thumbnail',
//				 ),
//			  array (
//				 'tablename' => 'node_data_field_opinion_em_video',
//				 'field' => 'field_opinion_em_video_embed',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'video_thumbnail',
//				 ),
//			  array (
//				 'tablename' => 'node_data_field_opinion_em_audio',
//				 'field' => 'field_opinion_em_audio_embed',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'emaudio_thumbnail',
//				 ),
//
//			  );
//    break;
//  case 'member':
//    $view->field = array (
//			  array (
//				 'tablename' => 'node_data_field_full_name',
//				 'field' => 'field_full_name_value',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'default',
//				 ),
//			  array (
//				 'tablename' => 'node',
//				 'field' => 'title',
//				 'label' => '',
//				 'handler' => 'views_handler_field_nodelink',
//				 'options' => 'nolink',
//				 ),
//			  array (
//				 'tablename' => 'node_data_field_one_liner',
//				 'field' => 'field_one_liner_value',
//				 'label' => '',
//				 'handler' => 'content_views_field_handler_group',
//				 'options' => 'default',
//				 ),
// 			  array (
// 				 'tablename' => 'users',
// 				 'field' => 'uid',
// 				 'label' => '',
// 				 ),
//			  array (
//				 'tablename' => 'node',
//				 'field' => 'body',
//				 'label' => '',
//				 'handler' => 'views_handler_field_teaser_plain',
//				 'options' => 48, // number of charcters to truncate teaser
//				                  // if one liner is not empty, the teaser will not be shown.
//				 ),
//			  );
//    break;
//  };
//  // filter...
//  //views_view_add_filter($view, $table, $field, $operator, $value, $option)
//  // filter only 'published' nodes
//  views_view_add_filter($view, 'node', 'status', '=', 1, '') ;
//  // ensure only a single copy is shown
//  views_view_add_filter($view, 'node', 'distinct', '=', array(0 => 'distinct'), '') ;
//  // filter according to type
//  if ($type == 'opinion') {
//    views_view_add_filter($view, 'node', 'type', 'OR', array(0 => 'opinion', 1 => 'interpretation'), '') ;
//  }
//  else if ($type == 'blog') {
//    views_view_add_filter($view, 'node', 'type', 'OR', array(0 => 'blog', 1 => 'dblog'), '') ;
//  }
//  else {
//    views_view_add_filter($view, 'node', 'type', 'OR', array(0 => $type), '') ;
//  }
//  if ($type == 'member') {
//    // show only active users
//    views_view_add_filter($view, 'users', 'status', '=', array(0 => '1'), '') ;
//  }
//  // filter based on taxonomy terms
//  if ($terms) {
//    foreach ($terms as $vid => $term_ids) {
//      views_view_add_filter($view, 'term_node', 'tid', 'OR', $term_ids, '') ;
//    }
//  }
//
//  // ensure the block does not show the node presented in page
//  if ($nid) {
//    // The code below should have worked, but the SQL output is AND (.nid '<>' $nid)
//    // i.e. missing the table name node in node.nid
//    // views_view_add_filter($view, 'node', 'nid', '<>', $nid, '');
//    // Instead we add an argument for this
//    // views_view_add_argument($view, $type, $default, $title, $option = '')
//    views_view_add_argument($view, 'nid', 1, '', 1); // option '1' is 'not-equal'
//    $views_args = array(0 => $nid);
//  }
//  else {
//    $views_args = array();
//  }
//
//  // sort order
//  if ($sort == CREEDIA_DEFAULTSORT_ID) {
//    // show 'featured' first
//    //    views_view_add_sort($view, 'flag_counts_featured', 'count', 'DESC', '');
//    views_view_add_sort($view, 'flag_content_featured', 'timestamp', 'DESC', '');
//    // else select in random
//    views_view_add_sort($view, 'node', 'random', 'ASC', '');
//  }
//  else {
//    // show latest
//    views_view_add_sort($view, 'node', 'created', 'DESC', '');
//    // views_view_add_sort($view, 'node', 'changed', 'DESC', '');
//  }
//  // invoke the cache
//  views_load_cache();
//
//  // sanitize view
//  views_sanitize_view($view);
//
//  // build the view
//  //views_build_view($type, $view, $args = array(), $use_pager = false, $limit = 0, $page = 0, $offset= 0, $filters= NULL)
//  $output = views_build_view('block', $view, $views_args, FALSE, $view->nodes_per_block);
//
////   if (!$output) {
////     // keep the block title to maintain links to list pages
////     $output = '<p></p>';
////   }
//  //  firep($view, 'view in generate_block');
//  return $output;
//}
//
