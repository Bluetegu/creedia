<?php
// $Id$
/**
 * @file
 * Creedia distance
 *
 **
 * This module calculates distances between Creedia members.
 *
 * The current metric is counting the common creeds between two members
 *
 * The module:
 *
 * - Keeps distances in a table for easy retrieval
 * - Integrates with Views
 * - Updated by Flag hook
 *
 * The table fields are:
 *
 * uid  - userid
 * mid  - userid
 * cnt  - count of common creeds
 *
 * Profile sharing should be taken into account when showing the
 * distances between members.
 *
 */

/**
 * Implementation of hook_views_api
 */
function cdist_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'cdist'),
  );
}

/**
 * Get distance between two users
 *
 * If user2 is NULL, the distance between user1 and the current logged-in
 * user is returned.
 *
 * If filter is TRUE, the returned distance is filtered according to the
 * current profile sharing settings of $user1:
 * - If user1 profile sharing is set to private (255) distance = 0 is always returned
 * - If user1 profile sharing is set to members-only (2) distance = 0 is returned for anonymous users.
 * - Else the distance is returned
 *
 */
function cdist_dist($uid1, $uid2 = NULL, $filter = TRUE) {

  global $user;

  $uid2 = $uid2 ? $uid2 : $user->uid;

  $sql  = "SELECT cnt FROM {cdist_cache} d WHERE d.uid = %d AND d.mid = %d ";
  $dist = db_result(db_query($sql, $uid1, $uid2));

  if ($filter) {
    $sql  = "SELECT m.field_profile_sharing_value AS share ";
    $sql .= "FROM {content_type_member} m ";
    $sql .= "INNER JOIN {node} n ";
    $sql .= "ON n.nid = m.nid AND n.vid = m.vid ";
    $sql .= "WHERE n.uid = %d";
    $share = db_result(db_query($sql, $uid1));

    if ($share == 255 ||   // If profile is private
    ($share > 0 && !$uid2)) {   // Or if anonymous and profile is only for members
      $dist = NULL;
    }
  }

  return $dist;
}

/**
 * Implementation of hook_menu
 */
function cdist_menu() {
  $items = array();

  $items['admin/content/creedia/cdist/reset'] = array(
        'title'    => 'Reset Distance Cache',
        'description' => 'Reset Distance Cache',
        'page callback' => 'cdist_reset',
        'type'     => MENU_CALLBACK,
        'access arguments' => array('administer site configuration'),
  );
  return $items;

}

/**
 * Implementation of hook_flag
 *
 * Update the distances table once a creed is (de)selected
 */
function cdist_flag($event, $flag, $content_id, $account) {

  if ($flag->name == 'adopt' && $account->uid) {
    // reset cache for specific user
    cdist_update($account->uid);
  }
}

/**
 * Create a members view sorted according to the distance from the
 * logged-in member.
 *
 * The only sort option I failed to integrate within cview_generate_page
 *
 */
/*function cdist_byway() {
  global $user;

  $terms = array();
  $nodes_per_page = CREEDIA_NODES_PER_PAGE;
  if (func_num_args()) {
    $arg_list = func_get_args();
    $current = current($arg_list);
    if (is_array($current)) {
      $arg_list = $arg_list[0];
    }
    $terms = cgallery_url_to_terms($arg_list);
  }
  views_load_cache();
  views_load_query();
  $view = views_create_view('byway_view', t('Members'));
  //views_view_add_page($view, $title, $url, $type, $pager, $nodes_per_page,
  //                    $header, $header_format, $breadcrumb_no_home = FALSE)
  views_view_add_page($view, t('Members'), 'members/byway', 'teaser', TRUE, $nodes_per_page, '', 1, TRUE);

  $args = implode(", ", array_keys($terms));

  $sql  = "SELECT m.*, n.*, d.cnt ";
  $sql .= "FROM {content_type_member} m ";
  $sql .= "INNER JOIN {node} n ";
  $sql .= "ON m.nid = n.nid AND n.status = 1 ";
  $sql .= "INNER JOIN {users} u ";
  $sql .= "ON n.uid = u.uid ";
  if (!empty($terms)) {
    $sql .= "INNER JOIN {term_node} tn ";
    $sql .= "ON tn.nid = m.nid AND tn.tid IN (%s) ";
  }
  $sql .= "LEFT JOIN {cdist_cache} d ";
  $sql .= "ON d.uid = n.uid AND (m.field_profile_sharing_value != 255 OR m.field_profile_sharing_value IS NULL) ";
  $sql .= "AND d.mid = ". $user->uid ." ";
  $sql .= "WHERE u.status = 1 "; // don't show blocked users n.status = 1 for all members published
  $sql .= "GROUP BY n.nid ";
  $sql .= "ORDER BY d.cnt DESC, n.created DESC ";

  // need to provide special count query for the pager to work.
  $count_query =  "SELECT COUNT(DISTINCT(m.nid))FROM {content_type_member} m ";
  $count_query .= "INNER JOIN {node} n ";
  $count_query .= "ON m.nid = n.nid AND n.status = 1 ";
  if (!empty($terms)) {
    $count_query .= "INNER JOIN {term_node} tn ";
    $count_query .= "ON tn.nid = m.nid AND tn.tid IN (%s) ";
  }

  $result = pager_query(db_rewrite_sql($sql), $nodes_per_page, 0, $count_query, $args);
  $items = array();
  while ($item = db_fetch_object($result)) {
    $items[] = $item;
  }

  $view->build_type = 'page';
  $view->type = 'teaser';
  $view->num_rows = $nodes_per_page;
  views_sanitize_view($view);

  $output = views_theme('views_view', $view, 'page', $items, NULL, array());
  if (!$output) {
    $output = t('No member tagged with the selected terms.');
  }
  return $output;
}
@@@TODO*/
/**
 * Create a block content that shows the 3 members that have most number
 * of creeds (ways) with the user whose profile is presented on the page.
 *
 */
/*function cdist_myway($uid) {
  global $user;
  $node = content_profile_load('member',$uid);
  $share = $node->field_profile_sharing[0]['value'];

  // don't reveal information about the profile by comparing it to other profiles.
  if ($share == 255 ||    // private profile
  ($share > 0 && !$user->uid)) {  // members only profile
    return '';
  }

  $limit = CREEDIA_NODES_PER_BLOCK;
  views_load_cache();
  views_load_query();
  $view = views_create_view('myway_prog', t('My Way Members'));
  views_view_add_block($view, '', 'list', $limit, FALSE, FALSE, '', 1);
  $view->field = array(
  array(
              'tablename' => 'node_data_field_full_name',
              'field' => 'field_full_name_value',
              'label' => '',
              'handler' => 'content_views_field_handler_group',
              'options' => 'default',
  ),
  array(
              'tablename' => 'node',
              'field' => 'title',
              'label' => '',
              'handler' => 'views_handler_field_nodelink',
              'options' => 'nolink',
  ),
  array(
              'tablename' => 'node_data_field_one_liner',
              'field' => 'field_one_liner_value',
              'label' => '',
              'handler' => 'content_views_field_handler_group',
              'options' => 'default',
  ),
  array(
             'tablename' => 'users',
             'field' => 'uid',
             'label' => '',
  ),
  array(
             'tablename' => 'node',
             'field' => 'body',
             'label' => '',
             'handler' => 'views_handler_field_teaser_plain',
             'options' => 48, // number of charcters to truncate teaser
  // if one liner is not empty, the teaser will not be shown.
  ),
  array(
             'tablename' => 'cdist_cache',
             'field' => 'cnt',
  ),
  );

  $sql  = "SELECT n.uid AS users_uid, m.nid, d.cnt, ";
  $sql .= "m.field_full_name_value AS node_data_field_full_name_field_full_name_value, ";
  $sql .= "m.field_one_liner_value AS node_data_field_one_liner_field_one_liner_value ";
  $sql .= "FROM {content_type_member} m ";
  $sql .= "INNER JOIN {node} n ";
  $sql .= "ON m.nid = n.nid AND n.status = 1 ";
  $sql .= "INNER JOIN {users} u ";
  $sql .= "ON n.uid = u.uid ";
  $sql .= "LEFT JOIN {cdist_cache} d ";
  $sql .= "ON d.uid = n.uid ";
  $sql .= $user->uid ? "AND (m.field_profile_sharing_value != 255 OR m.field_profile_sharing_value IS NULL) " :
    "AND (m.field_profile_sharing_value = 0 OR m.field_profile_sharing_value IS NULL) ";
  $sql .= "AND d.mid = %d ";
  $sql .= "WHERE d.cnt IS NOT NULL ";  // show only members with common ways
  $sql .= "AND u.status = 1 ";  // don't show blocked users n.status = 1 for all members published
  $sql .= "GROUP BY n.nid ";
  $sql .= "ORDER BY d.cnt DESC, n.created DESC ";

  $result = db_query_range(db_rewrite_sql($sql), $uid, 0, $limit);
  $items = array();
  while ($item = db_fetch_object($result)) {
    $items[] = $item;
    //    firep($item, 'item');
  }

  $view->build_type = 'block';
  $view->type = 'list';
  $view->num_rows = $limit;
  views_sanitize_view($view);

  $output = views_theme('views_view', $view, 'block', $items, NULL, array());
  return $output;
}
@@@TODO*/

/**
 * Implementation of hook_block
 */
/*function cdist_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  $uid = $user->uid;

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Creedia: My Way Members');
      $blocks[0]['visibility'] = 1; // show only on listed pages
      $blocks[0]['pages'] = "user/*\n";
      return $blocks;
    case 'configure':
      $form = array();
      return $form;
    case 'save':
      return;
    case 'view': default:
      switch ($delta) {
        case 0:
          if (is_numeric(arg(1))) {
            $title = t('My Way Members');
            $path = 'members/byway';
            $block['subject'] = l('Â» '. $title, $path, array('attributes' => array('title' => $description)));
            $block['content'] = cdist_myway(arg(1));
          }
          break;
      }
  }
  return $block;
}
@@@TODO*/

/**
 * Resets the cache and recalculate
 * the distances between all users
 *
 * NOT SCALABLE FOR LARGE NUMBER OF USERS
 * USE CRON INSTEAD
 *
 */
function cdist_reset() {

  // Delete all data from cache
  $sql  = "DELETE FROM {cdist_cache} ";
  db_query($sql);

  // Run over all users and update the cache
  $sql  = "SELECT uid FROM {node} ";
  $sql .= "WHERE type = 'member' AND status = 1 ";
  $result = db_query($sql);
  while ($data = db_fetch_object($result)) {
    cdist_update($data->uid);
  }

  $output = t('Distance between all users was re-calculated.');
  return $output;

}

/**
 * update the distances from a given user
 *
 * called when a adopts a creed to his/her profile
 * called also at intial cache buildup
 *
 * Params: $uid of member
 */
function cdist_update($uid) {

  // Calculate distances of all members to member ($nid, $uid)
  // List only the ones that have common creeds with specified member
  $sql =  "SELECT n.uid, %d AS mid, COUNT(g.content_id) AS cnt ";
  $sql .= "FROM {node} n ";
  $sql .= "INNER JOIN {flag_content} f ";                   // Add content flaged by each member
  $sql .= "ON f.uid = n.uid ";
  //  $sql .= "INNER JOIN {node} c "; // Add node information per each flag (to filter creeds)
  //  $sql .= "ON c.nid = f.content_id ";
  $sql .= "INNER JOIN {flag_content} g ";                   // Add nodes selected by member
  $sql .= "ON f.content_id = g.content_id AND f.fid = g.fid AND g.uid = %d ";  // Creeds selected by uid
  $sql .= "WHERE n.type = 'member' AND n.status = 1 AND n.uid != %d ";         // Don't include self
  //  $sql .= "AND c.type ='creed' AND c.status = 1 ";
  $sql .= "AND f.fid = %d "; // Adopt flag
  $sql .= "GROUP BY n.nid ";

  // get flag info
  $flag = flag_get_flag('adopt');

  if (!db_query_temporary($sql, $uid, $uid, $uid, $flag->fid, 'temp_cdist_cache_'. $uid)) {
    watchdog('creedia', 'CDIST: failed to create temporary table', WATCHDOG_ERROR);
  };

  // Delete all distances from this user
  $sql  = "DELETE FROM {cdist_cache} WHERE uid = %d OR mid = %d";
  db_query($sql, $uid, $uid);

  // Add the newly calculated distances
  $sql  = "INSERT INTO {cdist_cache} SELECT mid, uid, cnt FROM temp_cdist_cache_" . $uid;
  db_query($sql, $uid);
  $sql  = "INSERT INTO {cdist_cache} SELECT uid, mid, cnt FROM temp_cdist_cache_". $uid;
  db_query($sql, $uid);

  return;
}
